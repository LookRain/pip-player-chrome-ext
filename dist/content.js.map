{"version":3,"sources":["constants.ts","content.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAe,CAC1B,KAAM,CACJ,KAAM,oBAER,iBAAkB,CAChB,QAAS,UACT,KAAM,SAER,QAAS,CACP,KAAM,QAER,MAAO,CACL,KAAM;;ACVV,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,gBAEA,WAKM,IAAA,EAAmC,OACjC,EAAa,SACjB,GAEM,IAAA,EAAe,EAAA,aAAa,GAC9B,KAAU,IACZ,EAAS,EAAqB,IAEhC,OAAO,QAAQ,YAAY,CAAE,MAAK,KAG9B,EAAQ,WACZ,EAAQ,OACR,OAAO,QAAQ,YAAY,CAAE,MAAK,KAG9B,EAAyB,CAC7B,MAAO,kBACP,KAAM,cACN,OAAQ,eAGN,EAAoB,EA+BT,SAAA,EAAiB,GA1DlC,OAAA,EAAA,UAAA,OAAA,EAAA,WAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA6DM,OA7DN,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IA4DM,EAAW,QACX,CAAA,EAAM,EAAM,2BA7DlB,KAAA,EAAA,OA6DM,EAAA,OACA,EAAM,OACN,EAAW,WA/DjB,CAAA,EAAA,GAAA,KAAA,EAAA,OAAA,EAAA,OAiEM,EAAW,QACX,IACA,WAAW,EAAM,KAnEvB,CAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,QAuEW,SAAA,IACD,IAAA,EA3CC,WACD,IACF,EADE,EAAS,SAAS,SAAS,OAG3B,EAAc,OAAO,KACzB,GACA,KAAK,SAAA,GAAmB,OAAA,EAAO,SAAS,KAiBnC,OAdL,EADE,EACM,SAAS,cACf,EACE,IAII,SAAS,cAAc,SAI7B,SAAS,iBAAiB,SAAS,OAAS,GAC9C,OAAO,QAAQ,YAAY,CAAE,YAAY,IAGpC,EAoBO,GAcP,OAZH,EAOF,EAAiB,GAEjB,WAAW,EAAM,KAGZ,EAqCT,OAAO,QAAQ,UAAU,YAAY,SAAS,EAAS,EAAQ,GACvD,IAjBA,EAiBA,EAAoB,EAAQ,QAClB,SAAZ,GA/BJ,IAkCgB,yBAAZ,GA7BS,WAnGjB,EAAA,UAAA,OAAA,EAAA,WAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAoGI,MAAA,CAAA,EAAO,SAAiB,wBApG5B,KAAA,EAAA,OAoGI,EAAA,OACA,EAAW,QArGf,CAAA,QAiIM,GAEc,cAAZ,IAxBE,EAAM,SAAS,iBAAiB,SAAS,OAC/C,GAAqB,EAAM,EACtB,EAAoB,EACrB,IAEJ,EADc,SAAS,iBAAiB,SAAS,OA/GrD","file":"content.js","sourceRoot":"..\\src","sourcesContent":["export const stateMachine = {\r\n  idle: {\r\n    PLAY: 'attemptingToPlay',\r\n  },\r\n  attemptingToPlay: {\r\n    SUCCESS: 'playing',\r\n    FAIL: 'error',\r\n  },\r\n  playing: {\r\n    QUIT: 'idle',\r\n  },\r\n  error: {\r\n    PLAY: 'attemptingToPlay',\r\n  },\r\n};\r\n\r\nexport type Commands =\r\n  | 'play'\r\n  | 'original-player-play'\r\n  | 'play-next'\r\n  | 'mute'\r\n  | {continuous: boolean}\r\n  | {multiVideo: boolean};\r\n","import { stateMachine, Commands } from \"./constants\";\r\n\r\n(function() {\r\n  interface HTMLVideoElementNew extends HTMLVideoElement {\r\n    requestPictureInPicture: () => Promise<any>;\r\n  }\r\n\r\n  let state: keyof typeof stateMachine = \"idle\";\r\n  const transition = (\r\n    action: \"PLAY\" | \"SUCCESS\" | \"FAIL\" | \"QUIT\" | \"PLAY\"\r\n  ) => {\r\n    const currentState = stateMachine[state];\r\n    if (action in currentState) {\r\n      state = (currentState as any)[action];\r\n    }\r\n    chrome.runtime.sendMessage({ state });\r\n  };\r\n\r\n  const reset = () => {\r\n    state = \"idle\";\r\n    chrome.runtime.sendMessage({ state });\r\n  };\r\n\r\n  const siteToQuerySelectorMap = {\r\n    douyu: '[id^=\"__video\"]',\r\n    huya: \"#huya_video\",\r\n    huomao: \"#live-video\"\r\n  };\r\n\r\n  let currentVideoIndex = 0;\r\n\r\n  function getVideoEl() {\r\n    const origin = document.location.origin;\r\n    let video: HTMLVideoElementNew | null;\r\n\r\n    const matchedSite = Object.keys(\r\n      siteToQuerySelectorMap\r\n    ).find(sitePartialName => origin.includes(sitePartialName));\r\n\r\n    if (matchedSite) {\r\n      video = document.querySelector(\r\n        siteToQuerySelectorMap[\r\n          matchedSite as keyof typeof siteToQuerySelectorMap\r\n        ]\r\n      );\r\n    } else {\r\n      video = document.querySelector(\"video\") as HTMLVideoElementNew;\r\n    }\r\n\r\n    // if there're more than 1 <video> in the DOM, tell popup to display message and enable button to select next video\r\n    if (document.querySelectorAll(\"video\").length > 1) {\r\n      chrome.runtime.sendMessage({ multiVideo: true });\r\n    }\r\n\r\n    return video;\r\n  }\r\n  /**\r\n   * 开启画中画\r\n   * @param {HTMlVideoElement} video\r\n   */\r\n  async function pictureInPicture(video: HTMLVideoElementNew) {\r\n    try {\r\n      transition(\"PLAY\");\r\n      await video.requestPictureInPicture();\r\n      video.play();\r\n      transition(\"SUCCESS\");\r\n    } catch (err) {\r\n      transition(\"FAIL\");\r\n      reset();\r\n      setTimeout(init, 1000);\r\n    }\r\n  }\r\n\r\n  function init() {\r\n    const video = getVideoEl();\r\n\r\n    if (video) {\r\n      // const observer = new MutationObserver(async () => {\r\n      //   transition('PLAY');\r\n      //   init();\r\n      // });\r\n      // observer.observe(video as HTMLVideoElementNew, {attributes: true});\r\n      // observe(video);\r\n      pictureInPicture(video);\r\n    } else {\r\n      setTimeout(init, 1000);\r\n    }\r\n\r\n    return video;\r\n  }\r\n\r\n  let observing = false;\r\n  /**\r\n   * Play the default <video> in PIP\r\n   */\r\n  function onPipPlay() {\r\n    init();\r\n  }\r\n  /**\r\n   * Quit pip for the default <video>\r\n   */\r\n  async function onOriginalPlayerPlay() {\r\n    await (document as any).exitPictureInPicture();\r\n    transition(\"QUIT\");\r\n  }\r\n  /**\r\n   * For multiple <video> in the page, if played incorrectly, use this\r\n   */\r\n  function onNextVideoPipPlay() {\r\n    const len = document.querySelectorAll(\"video\").length;\r\n    currentVideoIndex >= len - 1\r\n      ? (currentVideoIndex = 0)\r\n      : currentVideoIndex++;\r\n    const video = document.querySelectorAll(\"video\")[currentVideoIndex];\r\n    pictureInPicture(video as HTMLVideoElementNew);\r\n  }\r\n  /**\r\n   * Mute video\r\n   */\r\n  function onMute() {}\r\n  /**\r\n   * Turn on continuous play\r\n   */\r\n  function onContinuousPlay(active: boolean) {}\r\n\r\n  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\r\n    const command: Commands = request.command;\r\n    if (command === \"play\") {\r\n      onPipPlay();\r\n    }\r\n    if (command === \"original-player-play\") {\r\n      onOriginalPlayerPlay();\r\n    }\r\n    if (command === \"play-next\") {\r\n      onNextVideoPipPlay();\r\n    }\r\n  });\r\n})();\r\n"]}