{"version":3,"sources":["constants.ts","content.ts"],"names":[],"mappings":"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","file":"content.js","sourceRoot":"../src","sourcesContent":["export const stateMachine = {\n  idle: {\n    PLAY: 'attemptingToPlay',\n  },\n  attemptingToPlay: {\n    SUCCESS: 'playing',\n    FAIL: 'error',\n  },\n  playing: {\n    QUIT: 'idle',\n  },\n  error: {\n    PLAY: 'attemptingToPlay',\n  },\n};\n\nexport type Commands =\n  | 'play'\n  | 'original-player-play'\n  | 'play-next'\n  | 'mute'\n  | {continuous: boolean}\n  | {multiVideo: boolean};\n","import {stateMachine, Commands} from './constants';\n\n(function() {\n  interface HTMLVideoElementNew extends HTMLVideoElement {\n    requestPictureInPicture: () => Promise<any>;\n  }\n\n  let state: keyof typeof stateMachine = 'idle';\n  const transition = (\n    action: 'PLAY' | 'SUCCESS' | 'FAIL' | 'QUIT' | 'PLAY',\n  ) => {\n    const currentState = stateMachine[state];\n    if (action in currentState) {\n      state = (currentState as any)[action];\n    }\n    chrome.runtime.sendMessage({state});\n  };\n\n  const reset = () => {\n    state = 'idle';\n    chrome.runtime.sendMessage({state});\n  };\n\n  const siteToQuerySelectorMap = {\n    douyu: '[id^=\"__video\"]',\n    huya: '#huya_video',\n    huomao: '#live-video',\n  };\n\n  let currentVideoIndex = 0;\n\n  function getVideoEl() {\n    const origin = document.location.origin;\n    let video: HTMLVideoElementNew | null;\n\n    const matchedSite = Object.keys(\n      siteToQuerySelectorMap,\n    ).find(sitePartialName => origin.includes(sitePartialName));\n\n    if (matchedSite) {\n      video = document.querySelector(\n        siteToQuerySelectorMap[\n          matchedSite as keyof typeof siteToQuerySelectorMap\n        ],\n      );\n    } else {\n      video = document.querySelector('video') as HTMLVideoElementNew;\n    }\n\n    // if there're more than 1 <video> in the DOM, tell popup to display message and enable button to select next video\n    if (document.querySelectorAll('video').length > 1) {\n      chrome.runtime.sendMessage({multiVideo: true});\n    }\n\n    return video;\n  }\n  /**\n   * 开启画中画\n   * @param {HTMlVideoElement} video\n   */\n  async function pictureInPicture(video: HTMLVideoElementNew) {\n    try {\n      transition('PLAY');\n      await video.requestPictureInPicture();\n      video.play();\n      transition('SUCCESS');\n    } catch (err) {\n      transition('FAIL');\n      reset();\n      setTimeout(init, 1000);\n    }\n  }\n\n\n  function init() {\n    const video = getVideoEl();\n\n    if (video) {\n      // const observer = new MutationObserver(async () => {\n      //   transition('PLAY');\n      //   init();\n      // });\n      // observer.observe(video as HTMLVideoElementNew, {attributes: true});\n      // observe(video);\n      pictureInPicture(video);\n    } else {\n      setTimeout(init, 1000);\n    }\n\n    return video;\n  }\n\n  let observing = false;\n  /**\n   * Play the default <video> in PIP\n   */\n  function onPipPlay() {\n    init();\n  }\n  /**\n   * Quit pip for the default <video>\n   */\n  async function onOriginalPlayerPlay() {\n    await (document as any).exitPictureInPicture();\n    transition('QUIT');\n  }\n  /**\n   * For multiple <video> in the page, if played incorrectly, use this\n   */\n  function onNextVideoPipPlay() {\n    const len = document.querySelectorAll('video').length;\n    currentVideoIndex >= len - 1 ? currentVideoIndex = 0 : currentVideoIndex ++;\n    const video = document.querySelectorAll('video')[currentVideoIndex];\n    pictureInPicture(video as HTMLVideoElementNew);\n  }\n  /**\n   * Mute video\n   */\n  function onMute() {}\n  /**\n   * Turn on continuous play\n   */\n  function onContinuousPlay(active: boolean) {}\n\n  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n    const command: Commands = request.command;\n    if (command === 'play') {\n      onPipPlay();\n    }\n    if (command === 'original-player-play') {\n      onOriginalPlayerPlay();\n    }\n    if (command === 'play-next') {\n      onNextVideoPipPlay();\n    }\n  });\n})();\n"]}